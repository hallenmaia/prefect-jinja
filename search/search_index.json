{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-jinja Welcome! prefect-jinja is a collection of pre-built Prefect tasks that can be used to quickly build Prefect flows to interact with Jinja . Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-jinja with pip : pip install prefect-jinja Then, register to view the block on Prefect Cloud: prefect block register -m prefect_jinja.blocks Load Block To use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Write and run a flow Render templates from a directory Using the JinjaEnvironmentBlock block and the jinja_render_from_template function to render an HTML page. Remote storage We recommend configuring remote file storage for task execution with JinjaEnvironmentBlock block and the jinja_render_from_template function. This ensures tasks have access to templates files, particularly when accessing a instance outside the execution environment. from prefect import flow from prefect_jinja import JinjaEnvironmentBlock , jinja_render_from_template @flow def send_welcome_flow ( username : str ): jinja_environment = JinjaEnvironmentBlock ( search_path = \"templates\" , namespace = { \"company_name\" : \"Acme\" , } ) return jinja_render_from_template ( \"welcome.html\" , jinja_environment , username = username ) print ( send_welcome_flow ( username = \"Neymar\" )) Render templates from a string Using the jinja_render_from_string function to render a string. from prefect import flow from prefect_jinja import jinja_render_from_string @flow def send_hello_flow ( username : str ): return jinja_render_from_string ( \"Hello, {{name}}!\" , username = username ) print ( send_hello_flow ( username = \"Robinho\" )) Resources If you encounter any bugs while using prefect-jinja , feel free to open an issue in the prefect-jinja repository. If you have any questions or issues while using prefect-jinja , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-jinja for development, clone the repository and perform an editable install with pip : git clone https://github.com/hallenmaia/prefect-jinja.git cd prefect-jinja/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-jinja","text":"","title":"prefect-jinja"},{"location":"#welcome","text":"prefect-jinja is a collection of pre-built Prefect tasks that can be used to quickly build Prefect flows to interact with Jinja .","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-jinja with pip : pip install prefect-jinja Then, register to view the block on Prefect Cloud: prefect block register -m prefect_jinja.blocks Load Block To use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#write-and-run-a-flow","text":"","title":"Write and run a flow"},{"location":"#render-templates-from-a-directory","text":"Using the JinjaEnvironmentBlock block and the jinja_render_from_template function to render an HTML page. Remote storage We recommend configuring remote file storage for task execution with JinjaEnvironmentBlock block and the jinja_render_from_template function. This ensures tasks have access to templates files, particularly when accessing a instance outside the execution environment. from prefect import flow from prefect_jinja import JinjaEnvironmentBlock , jinja_render_from_template @flow def send_welcome_flow ( username : str ): jinja_environment = JinjaEnvironmentBlock ( search_path = \"templates\" , namespace = { \"company_name\" : \"Acme\" , } ) return jinja_render_from_template ( \"welcome.html\" , jinja_environment , username = username ) print ( send_welcome_flow ( username = \"Neymar\" ))","title":"Render templates from a directory"},{"location":"#render-templates-from-a-string","text":"Using the jinja_render_from_string function to render a string. from prefect import flow from prefect_jinja import jinja_render_from_string @flow def send_hello_flow ( username : str ): return jinja_render_from_string ( \"Hello, {{name}}!\" , username = username ) print ( send_hello_flow ( username = \"Robinho\" ))","title":"Render templates from a string"},{"location":"#resources","text":"If you encounter any bugs while using prefect-jinja , feel free to open an issue in the prefect-jinja repository. If you have any questions or issues while using prefect-jinja , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-jinja for development, clone the repository and perform an editable install with pip : git clone https://github.com/hallenmaia/prefect-jinja.git cd prefect-jinja/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"blocks/","text":"prefect_jinja.blocks A module to interact with Jinja Environment. JinjaEnvironmentBlock Block to create a template environment. Parameters: Name Type Description Default namespace dict A dict of variables that are available in every template loaded by the environment. required search_path str A path to the directory that contains the templates. Can be relative or absolute. Relative paths are relative to the running flow directory. required Example Load a environment block: from prefect_jinja import JinjaEnvironmentBlock block = JinjaEnvironmentBlock . load ( \"BLOCK_NAME\" ) Source code in prefect_jinja/blocks.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class JinjaEnvironmentBlock ( Block ): \"\"\" Block to create a template environment. Args: namespace (dict): A dict of variables that are available in every template loaded by the environment. search_path (str): A path to the directory that contains the templates. Can be relative or absolute. Relative paths are relative to the running `flow` directory. Example: Load a environment block: ```python from prefect_jinja import JinjaEnvironmentBlock block = JinjaEnvironmentBlock.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Jinja Environment\" # _logo_url = \"\" namespace : Dict [ str , Optional [ str ]] = Field ( default_factory = dict , description = \"A dict of variables that are available in every template loaded by the environment.\" , ) search_path : Optional [ str ] = Field ( description = \"A path to the directory that contains the templates. Can be relative or absolute. Relative paths are relative to the running `flow` directory.\" , ) def get_env ( self ) -> Environment : \"\"\" Creates a Jinja Environment with a loader that searches for template files in the path provided by the `search_path` attribute and sets the global variables provided by the `namespace` attribute. Returns: A Jinja environment. Example: ```python @flow def example_get_jinja_environment_flow(): env_block = JinjaEnvironmentBlock( search_path=\"templates\", namespace={\"sender_mail\": \"sender@test.com\"} ) return env_block.get_env() jinja_env = example_get_jinja_environment_flow() ``` \"\"\" loader = FileSystemLoader ( self . search_path ) env = Environment ( loader = loader , autoescape = select_autoescape (), enable_async = True ) if self . namespace is not None : env . globals = self . namespace . copy () return env get_env Creates a Jinja Environment with a loader that searches for template files in the path provided by the search_path attribute and sets the global variables provided by the namespace attribute. Returns: Type Description Environment A Jinja environment. Example @flow def example_get_jinja_environment_flow (): env_block = JinjaEnvironmentBlock ( search_path = \"templates\" , namespace = { \"sender_mail\" : \"sender@test.com\" } ) return env_block . get_env () jinja_env = example_get_jinja_environment_flow () Source code in prefect_jinja/blocks.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def get_env ( self ) -> Environment : \"\"\" Creates a Jinja Environment with a loader that searches for template files in the path provided by the `search_path` attribute and sets the global variables provided by the `namespace` attribute. Returns: A Jinja environment. Example: ```python @flow def example_get_jinja_environment_flow(): env_block = JinjaEnvironmentBlock( search_path=\"templates\", namespace={\"sender_mail\": \"sender@test.com\"} ) return env_block.get_env() jinja_env = example_get_jinja_environment_flow() ``` \"\"\" loader = FileSystemLoader ( self . search_path ) env = Environment ( loader = loader , autoescape = select_autoescape (), enable_async = True ) if self . namespace is not None : env . globals = self . namespace . copy () return env","title":"Blocks"},{"location":"blocks/#prefect_jinja.blocks","text":"A module to interact with Jinja Environment.","title":"blocks"},{"location":"blocks/#prefect_jinja.blocks.JinjaEnvironmentBlock","text":"Block to create a template environment. Parameters: Name Type Description Default namespace dict A dict of variables that are available in every template loaded by the environment. required search_path str A path to the directory that contains the templates. Can be relative or absolute. Relative paths are relative to the running flow directory. required Example Load a environment block: from prefect_jinja import JinjaEnvironmentBlock block = JinjaEnvironmentBlock . load ( \"BLOCK_NAME\" ) Source code in prefect_jinja/blocks.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class JinjaEnvironmentBlock ( Block ): \"\"\" Block to create a template environment. Args: namespace (dict): A dict of variables that are available in every template loaded by the environment. search_path (str): A path to the directory that contains the templates. Can be relative or absolute. Relative paths are relative to the running `flow` directory. Example: Load a environment block: ```python from prefect_jinja import JinjaEnvironmentBlock block = JinjaEnvironmentBlock.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Jinja Environment\" # _logo_url = \"\" namespace : Dict [ str , Optional [ str ]] = Field ( default_factory = dict , description = \"A dict of variables that are available in every template loaded by the environment.\" , ) search_path : Optional [ str ] = Field ( description = \"A path to the directory that contains the templates. Can be relative or absolute. Relative paths are relative to the running `flow` directory.\" , ) def get_env ( self ) -> Environment : \"\"\" Creates a Jinja Environment with a loader that searches for template files in the path provided by the `search_path` attribute and sets the global variables provided by the `namespace` attribute. Returns: A Jinja environment. Example: ```python @flow def example_get_jinja_environment_flow(): env_block = JinjaEnvironmentBlock( search_path=\"templates\", namespace={\"sender_mail\": \"sender@test.com\"} ) return env_block.get_env() jinja_env = example_get_jinja_environment_flow() ``` \"\"\" loader = FileSystemLoader ( self . search_path ) env = Environment ( loader = loader , autoescape = select_autoescape (), enable_async = True ) if self . namespace is not None : env . globals = self . namespace . copy () return env","title":"JinjaEnvironmentBlock"},{"location":"blocks/#prefect_jinja.blocks.JinjaEnvironmentBlock.get_env","text":"Creates a Jinja Environment with a loader that searches for template files in the path provided by the search_path attribute and sets the global variables provided by the namespace attribute. Returns: Type Description Environment A Jinja environment. Example @flow def example_get_jinja_environment_flow (): env_block = JinjaEnvironmentBlock ( search_path = \"templates\" , namespace = { \"sender_mail\" : \"sender@test.com\" } ) return env_block . get_env () jinja_env = example_get_jinja_environment_flow () Source code in prefect_jinja/blocks.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def get_env ( self ) -> Environment : \"\"\" Creates a Jinja Environment with a loader that searches for template files in the path provided by the `search_path` attribute and sets the global variables provided by the `namespace` attribute. Returns: A Jinja environment. Example: ```python @flow def example_get_jinja_environment_flow(): env_block = JinjaEnvironmentBlock( search_path=\"templates\", namespace={\"sender_mail\": \"sender@test.com\"} ) return env_block.get_env() jinja_env = example_get_jinja_environment_flow() ``` \"\"\" loader = FileSystemLoader ( self . search_path ) env = Environment ( loader = loader , autoescape = select_autoescape (), enable_async = True ) if self . namespace is not None : env . globals = self . namespace . copy () return env","title":"get_env()"},{"location":"tasks/","text":"prefect_jinja.tasks Tasks for rendering Jinja Templates. jinja_render_from_string async Task that performs the rendering of a string. Note The context of a task will be available in the template via context keyword. Parameters: Name Type Description Default template_string str A string representing a template. required **kwargs dict Keywords that will be available as variables in the template. {} Raises: Type Description TemplateSyntaxError If there is a problem with the template. Returns: Type Description str A string containing the rendered template. Examples: Render a hello with username: @flow def send_hello_flow ( username : str ): return jinja_render_from_string ( \"Hello, {{name}}!\" , username = username ) print ( send_hello_flow ( username = \"Robinho\" )) Source code in prefect_jinja/tasks.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 @task async def jinja_render_from_string ( template_string : str , ** kwargs ) -> str : \"\"\" Task that performs the rendering of a string. !!! note Context The context of a task will be available in the template via `context` keyword. Args: template_string: A string representing a template. **kwargs (dict): Keywords that will be available as variables in the template. Raises: TemplateSyntaxError: If there is a problem with the template. Returns: A string containing the rendered template. Examples: Render a hello with username: ```python @flow def send_hello_flow(username: str): return jinja_render_from_string(\"Hello, {{name}}!\", username=username) print(send_hello_flow(username=\"Robinho\")) ``` \"\"\" context = get_run_context () template = Template ( template_string , enable_async = True ) template . globals = _get_template_context ( context ) return await template . render_async ( ** kwargs ) jinja_render_from_template async Task that performs the rendering of a template file based on settings of a Jinja Environment block. Note The context of a task will be available in the template via context keyword. Parameters: Name Type Description Default name str Name of template file to render. required jinja_environment JinjaEnvironmentBlock A Jinja Environment block. required **kwargs dict Keywords that will be available as variables in the template. {} Raises: Type Description TemplateNotFound If the template file does not exist. TemplateSyntaxError If there is a problem with the template. Returns: Type Description str A string containing the rendered template. Examples: Render a welcome template file inside templates folder with company_name as block variable and username as keyword: @flow def send_welcome_flow ( username : str ): jinja_environment = JinjaEnvironmentBlock ( search_path = \"templates\" , namespace = { \"company_name\" : \"Acme\" , } ) return jinja_render_from_template ( \"welcome.html\" , jinja_environment , username = username ) print ( send_welcome_flow ( username = \"Neymar\" )) Source code in prefect_jinja/tasks.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 @task async def jinja_render_from_template ( name : str , jinja_environment : JinjaEnvironmentBlock , ** kwargs ) -> str : \"\"\" Task that performs the rendering of a template file based on settings of a `Jinja Environment` block. !!! note Context The context of a task will be available in the template via `context` keyword. Args: name: Name of template file to render. jinja_environment: A Jinja Environment block. **kwargs (dict): Keywords that will be available as variables in the template. Raises: TemplateNotFound: If the template file does not exist. TemplateSyntaxError: If there is a problem with the template. Returns: A string containing the rendered template. Examples: Render a welcome template file inside `templates` folder with `company_name` as block variable and `username` as keyword: ```python @flow def send_welcome_flow(username: str): jinja_environment = JinjaEnvironmentBlock( search_path=\"templates\", namespace={ \"company_name\": \"Acme\", } ) return jinja_render_from_template( \"welcome.html\", jinja_environment, username=username ) print(send_welcome_flow(username=\"Neymar\")) ``` \"\"\" context = get_run_context () jinja_env = jinja_environment . get_env () template = jinja_env . get_template ( name , globals = _get_template_context ( context )) return await template . render_async ( ** kwargs )","title":"Tasks"},{"location":"tasks/#prefect_jinja.tasks","text":"Tasks for rendering Jinja Templates.","title":"tasks"},{"location":"tasks/#prefect_jinja.tasks.jinja_render_from_string","text":"Task that performs the rendering of a string. Note The context of a task will be available in the template via context keyword. Parameters: Name Type Description Default template_string str A string representing a template. required **kwargs dict Keywords that will be available as variables in the template. {} Raises: Type Description TemplateSyntaxError If there is a problem with the template. Returns: Type Description str A string containing the rendered template. Examples: Render a hello with username: @flow def send_hello_flow ( username : str ): return jinja_render_from_string ( \"Hello, {{name}}!\" , username = username ) print ( send_hello_flow ( username = \"Robinho\" )) Source code in prefect_jinja/tasks.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 @task async def jinja_render_from_string ( template_string : str , ** kwargs ) -> str : \"\"\" Task that performs the rendering of a string. !!! note Context The context of a task will be available in the template via `context` keyword. Args: template_string: A string representing a template. **kwargs (dict): Keywords that will be available as variables in the template. Raises: TemplateSyntaxError: If there is a problem with the template. Returns: A string containing the rendered template. Examples: Render a hello with username: ```python @flow def send_hello_flow(username: str): return jinja_render_from_string(\"Hello, {{name}}!\", username=username) print(send_hello_flow(username=\"Robinho\")) ``` \"\"\" context = get_run_context () template = Template ( template_string , enable_async = True ) template . globals = _get_template_context ( context ) return await template . render_async ( ** kwargs )","title":"jinja_render_from_string()"},{"location":"tasks/#prefect_jinja.tasks.jinja_render_from_template","text":"Task that performs the rendering of a template file based on settings of a Jinja Environment block. Note The context of a task will be available in the template via context keyword. Parameters: Name Type Description Default name str Name of template file to render. required jinja_environment JinjaEnvironmentBlock A Jinja Environment block. required **kwargs dict Keywords that will be available as variables in the template. {} Raises: Type Description TemplateNotFound If the template file does not exist. TemplateSyntaxError If there is a problem with the template. Returns: Type Description str A string containing the rendered template. Examples: Render a welcome template file inside templates folder with company_name as block variable and username as keyword: @flow def send_welcome_flow ( username : str ): jinja_environment = JinjaEnvironmentBlock ( search_path = \"templates\" , namespace = { \"company_name\" : \"Acme\" , } ) return jinja_render_from_template ( \"welcome.html\" , jinja_environment , username = username ) print ( send_welcome_flow ( username = \"Neymar\" )) Source code in prefect_jinja/tasks.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 @task async def jinja_render_from_template ( name : str , jinja_environment : JinjaEnvironmentBlock , ** kwargs ) -> str : \"\"\" Task that performs the rendering of a template file based on settings of a `Jinja Environment` block. !!! note Context The context of a task will be available in the template via `context` keyword. Args: name: Name of template file to render. jinja_environment: A Jinja Environment block. **kwargs (dict): Keywords that will be available as variables in the template. Raises: TemplateNotFound: If the template file does not exist. TemplateSyntaxError: If there is a problem with the template. Returns: A string containing the rendered template. Examples: Render a welcome template file inside `templates` folder with `company_name` as block variable and `username` as keyword: ```python @flow def send_welcome_flow(username: str): jinja_environment = JinjaEnvironmentBlock( search_path=\"templates\", namespace={ \"company_name\": \"Acme\", } ) return jinja_render_from_template( \"welcome.html\", jinja_environment, username=username ) print(send_welcome_flow(username=\"Neymar\")) ``` \"\"\" context = get_run_context () jinja_env = jinja_environment . get_env () template = jinja_env . get_template ( name , globals = _get_template_context ( context )) return await template . render_async ( ** kwargs )","title":"jinja_render_from_template()"},{"location":"tutorials/email/","text":"Send emails in HTML format In this tutorial, we will create a flow to send welcome emails to users who have subscribed to a list. In this tutorial we'll: Create a base template to be used in all emails. Create a welcome template to be sent to new users. Create a flow that sends a welcome email. Sources Sources for this tutorial can be found in the examples/email folder of this repository. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. This flow is designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . prefect-email This tutorial requires the prefect-email collection installed to send emails. Installation Install prefect-jinja and prefect-email with pip : pip install prefect-jinja prefect-email Then, register to view blocks on Prefect Cloud: prefect block register -m prefect_jinja.blocks prefect block register -m prefect_email.credentials Project Structure Let's consider the following project structure: \u251c\u2500\u2500 flows \u2502 \u251c\u2500\u2500 templates \u2502 \u2502 \u251c\u2500\u2500 base.html \u2502 \u2502 \u2514\u2500\u2500 welcome.html \u2502 \u2514\u2500\u2500 send_welcome.py \u2514\u2500\u2500 requirements.txt Run the command below to create the required directories: mkdir -p flows/templates Blocks Open the Prefect UI and navigate to the Blocks page. To create a new block, select the + button on this page, or if you haven't previously created any blocks, New Block . Prefect displays a page of available block types. For this tutorial, we will use the Jinja Environment and Email Server Credentials blocks. Jinja Environment Scroll down the list of blocks and find the Jinja Environment block, then select Add + to configure a new block. Enter the configuration for your Jinja Environment : Block Name is the name by which your block is referenced. The name must only contain lowercase letters, numbers, and dashes. Namespace contains the variables that are available in every template loaded by the block. Search Path is the name of the directory where the templates are stored. Can be relative or absolute. Relative paths are relative to the running flow directory. In this tutorial, we will use the following settings: Block Name : email-templates Namespace : { \"logo\" : \"https://d33wubrfki0l68.cloudfront.net/504beb80ec8dfc980a28612dd72249b413897927/8118e/assets/prefect-logo-gradient-navy.svg\" , \"slack\" : \"https://prefect.io/slack\" , \"discourse\" : \"https://discourse.prefect.io\" } Search Path : templates Select Create to create the block. Prefect displays the details of the new block, including a code example to use in your flow code. Email Server Credentials Navigate back to the Blocks page and select the + button on this page to create a new block. Scroll down the list of blocks and find the Email Server Credentials block, then select Add + to configure a new block. Enter the configuration for your email server: Block Name is the name by which your block is referenced. The name must only contain lowercase letters, numbers, and dashes. Username : The username to use for authentication to the server. Password : The password to use for authentication to the server. SMTP Server : Either the hostname of the SMTP server, or one of the keys from the built-in SMTPServer Enum members, like \"gmail\". SMTP Type : Either \"SSL\", \"STARTTLS\", or \"INSECURE\". SMPT Port : If provided, overrides the smtp_type's default port number. In this tutorial, we will use the following settings: Block Name : outgoing-mail-server Username, Password and SMTP Server The values of these fields were not displayed for security reasons. Check with your email provider for the correct values for these fields. Select Create to create the block. Prefect displays the details of the new block, including a code example to use in your flow code. Templates As this repository may contain other email flows, let's create a base template to standardize the layout of all emails. Next, let's create the welcome template . Base Create a file named base.html inside the flows/templates directory with the following content: <!DOCTYPE html> < html > < head >< title > {% block title %}{% endblock %} </ title > < body > < table width = \"100%\" > < tr > < td align = \"center\" > < img alt = \"Logo\" src = \"{{ logo }}\" width = \"200px\" height = \"50px\" > </ td > </ tr > < tr > < td > {% block content %}{% endblock %} </ td > </ tr > </ table > </ body > </ html > Welcome Create a file named welcome.html inside the flows/templates directory with the following content: {% extends \"base.html\" %} {% block title %}Welcome to Prefect{% endblock %} {% block content %} < p > Hi {{ username }}! </ p > < p > Having any trouble upgrading to Prefect 2.0 at all? Try out our < a href = \"https://www.youtube.com/watch?v=YyAQ61eRGhI&list=PLZfWmQS5hVzF3u9FY4-43U4UoTblFgC2l\" > full YouTube playlist </ a > of migration content! </ p > < p > If you need any help, please don't hesitate to reach out in our < a href = \"{{ slack }}\" > Slack community </ a > or < a href = \"{{ discourse }}\" > Discourse forum </ a > ! </ p > < p > Happy Engineering, </ p > < p > Prefect Customer Success Team </ p > {% endblock %} Flow Create the send_welcome.py inside the flows directory with the following content: from prefect import flow from prefect_email import EmailServerCredentials , email_send_message from prefect_jinja import JinjaEnvironmentBlock , jinja_render_from_template @flow def send_welcome_flow ( username : str , email_to : str ): jinja_environment = JinjaEnvironmentBlock . load ( \"email-templates\" ) email_body = jinja_render_from_template ( \"welcome.html\" , jinja_environment , username = username ) email_server_credentials = EmailServerCredentials . load ( \"outgoing-mail-server\" ) email_send_message ( email_server_credentials = email_server_credentials , subject = \"Welcome to Prefect\" , msg = email_body , email_to = email_to , ) if __name__ == '__main__' : result = send_welcome_flow ( username = \"Jeronimo\" , email_to = \"jeronimo@example.com\" ) print ( result ) Running Enter the flows directory. Then run the send_welcome.py flows with python: cd flows python send_welcome.py The template will be rendered and send by the prefect-email with the following content: <!DOCTYPE html> < html > < head >< title > Welcome to Prefect </ title > < body > < table width = \"100%\" > < tr > < td align = \"center\" > < img alt = \"Logo\" src = \"https://d33wubrfki0l68.cloudfront.net/504beb80ec8dfc980a28612dd72249b413897927/8118e/assets/prefect-logo-gradient-navy.svg\" width = \"200px\" height = \"50px\" > </ td > </ tr > < tr > < td > < p > Hi Jeronimo! </ p > < p > Having any trouble upgrading to Prefect 2.0 at all? Try out our < a href = \"https://www.youtube.com/watch?v=YyAQ61eRGhI&list=PLZfWmQS5hVzF3u9FY4-43U4UoTblFgC2l\" > full YouTube playlist </ a > of migration content! </ p > < p > If you need any help, please don't hesitate to reach out in our < a href = \"https://prefect.io/slack\" > Slack community </ a > or < a href = \"https://discourse.prefect.io\" > Discourse forum </ a > ! </ p > < p > Happy Engineering, </ p > < p > Prefect Customer Success Team </ p > </ td > </ tr > </ table > </ body > </ html > That's it \ud83e\udd73. Now emails sent through Prefect flows will look more elegant. I hope this helps you.","title":"Email"},{"location":"tutorials/email/#send-emails-in-html-format","text":"In this tutorial, we will create a flow to send welcome emails to users who have subscribed to a list. In this tutorial we'll: Create a base template to be used in all emails. Create a welcome template to be sent to new users. Create a flow that sends a welcome email. Sources Sources for this tutorial can be found in the examples/email folder of this repository.","title":"Send emails in HTML format"},{"location":"tutorials/email/#getting-started","text":"","title":"Getting Started"},{"location":"tutorials/email/#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. This flow is designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . prefect-email This tutorial requires the prefect-email collection installed to send emails.","title":"Python setup"},{"location":"tutorials/email/#installation","text":"Install prefect-jinja and prefect-email with pip : pip install prefect-jinja prefect-email Then, register to view blocks on Prefect Cloud: prefect block register -m prefect_jinja.blocks prefect block register -m prefect_email.credentials","title":"Installation"},{"location":"tutorials/email/#project-structure","text":"Let's consider the following project structure: \u251c\u2500\u2500 flows \u2502 \u251c\u2500\u2500 templates \u2502 \u2502 \u251c\u2500\u2500 base.html \u2502 \u2502 \u2514\u2500\u2500 welcome.html \u2502 \u2514\u2500\u2500 send_welcome.py \u2514\u2500\u2500 requirements.txt Run the command below to create the required directories: mkdir -p flows/templates","title":"Project Structure"},{"location":"tutorials/email/#blocks","text":"Open the Prefect UI and navigate to the Blocks page. To create a new block, select the + button on this page, or if you haven't previously created any blocks, New Block . Prefect displays a page of available block types. For this tutorial, we will use the Jinja Environment and Email Server Credentials blocks.","title":"Blocks"},{"location":"tutorials/email/#jinja-environment","text":"Scroll down the list of blocks and find the Jinja Environment block, then select Add + to configure a new block. Enter the configuration for your Jinja Environment : Block Name is the name by which your block is referenced. The name must only contain lowercase letters, numbers, and dashes. Namespace contains the variables that are available in every template loaded by the block. Search Path is the name of the directory where the templates are stored. Can be relative or absolute. Relative paths are relative to the running flow directory. In this tutorial, we will use the following settings: Block Name : email-templates Namespace : { \"logo\" : \"https://d33wubrfki0l68.cloudfront.net/504beb80ec8dfc980a28612dd72249b413897927/8118e/assets/prefect-logo-gradient-navy.svg\" , \"slack\" : \"https://prefect.io/slack\" , \"discourse\" : \"https://discourse.prefect.io\" } Search Path : templates Select Create to create the block. Prefect displays the details of the new block, including a code example to use in your flow code.","title":"Jinja Environment"},{"location":"tutorials/email/#email-server-credentials","text":"Navigate back to the Blocks page and select the + button on this page to create a new block. Scroll down the list of blocks and find the Email Server Credentials block, then select Add + to configure a new block. Enter the configuration for your email server: Block Name is the name by which your block is referenced. The name must only contain lowercase letters, numbers, and dashes. Username : The username to use for authentication to the server. Password : The password to use for authentication to the server. SMTP Server : Either the hostname of the SMTP server, or one of the keys from the built-in SMTPServer Enum members, like \"gmail\". SMTP Type : Either \"SSL\", \"STARTTLS\", or \"INSECURE\". SMPT Port : If provided, overrides the smtp_type's default port number. In this tutorial, we will use the following settings: Block Name : outgoing-mail-server Username, Password and SMTP Server The values of these fields were not displayed for security reasons. Check with your email provider for the correct values for these fields. Select Create to create the block. Prefect displays the details of the new block, including a code example to use in your flow code.","title":"Email Server Credentials"},{"location":"tutorials/email/#templates","text":"As this repository may contain other email flows, let's create a base template to standardize the layout of all emails. Next, let's create the welcome template .","title":"Templates"},{"location":"tutorials/email/#base","text":"Create a file named base.html inside the flows/templates directory with the following content: <!DOCTYPE html> < html > < head >< title > {% block title %}{% endblock %} </ title > < body > < table width = \"100%\" > < tr > < td align = \"center\" > < img alt = \"Logo\" src = \"{{ logo }}\" width = \"200px\" height = \"50px\" > </ td > </ tr > < tr > < td > {% block content %}{% endblock %} </ td > </ tr > </ table > </ body > </ html >","title":"Base"},{"location":"tutorials/email/#welcome","text":"Create a file named welcome.html inside the flows/templates directory with the following content: {% extends \"base.html\" %} {% block title %}Welcome to Prefect{% endblock %} {% block content %} < p > Hi {{ username }}! </ p > < p > Having any trouble upgrading to Prefect 2.0 at all? Try out our < a href = \"https://www.youtube.com/watch?v=YyAQ61eRGhI&list=PLZfWmQS5hVzF3u9FY4-43U4UoTblFgC2l\" > full YouTube playlist </ a > of migration content! </ p > < p > If you need any help, please don't hesitate to reach out in our < a href = \"{{ slack }}\" > Slack community </ a > or < a href = \"{{ discourse }}\" > Discourse forum </ a > ! </ p > < p > Happy Engineering, </ p > < p > Prefect Customer Success Team </ p > {% endblock %}","title":"Welcome"},{"location":"tutorials/email/#flow","text":"Create the send_welcome.py inside the flows directory with the following content: from prefect import flow from prefect_email import EmailServerCredentials , email_send_message from prefect_jinja import JinjaEnvironmentBlock , jinja_render_from_template @flow def send_welcome_flow ( username : str , email_to : str ): jinja_environment = JinjaEnvironmentBlock . load ( \"email-templates\" ) email_body = jinja_render_from_template ( \"welcome.html\" , jinja_environment , username = username ) email_server_credentials = EmailServerCredentials . load ( \"outgoing-mail-server\" ) email_send_message ( email_server_credentials = email_server_credentials , subject = \"Welcome to Prefect\" , msg = email_body , email_to = email_to , ) if __name__ == '__main__' : result = send_welcome_flow ( username = \"Jeronimo\" , email_to = \"jeronimo@example.com\" ) print ( result )","title":"Flow"},{"location":"tutorials/email/#running","text":"Enter the flows directory. Then run the send_welcome.py flows with python: cd flows python send_welcome.py The template will be rendered and send by the prefect-email with the following content: <!DOCTYPE html> < html > < head >< title > Welcome to Prefect </ title > < body > < table width = \"100%\" > < tr > < td align = \"center\" > < img alt = \"Logo\" src = \"https://d33wubrfki0l68.cloudfront.net/504beb80ec8dfc980a28612dd72249b413897927/8118e/assets/prefect-logo-gradient-navy.svg\" width = \"200px\" height = \"50px\" > </ td > </ tr > < tr > < td > < p > Hi Jeronimo! </ p > < p > Having any trouble upgrading to Prefect 2.0 at all? Try out our < a href = \"https://www.youtube.com/watch?v=YyAQ61eRGhI&list=PLZfWmQS5hVzF3u9FY4-43U4UoTblFgC2l\" > full YouTube playlist </ a > of migration content! </ p > < p > If you need any help, please don't hesitate to reach out in our < a href = \"https://prefect.io/slack\" > Slack community </ a > or < a href = \"https://discourse.prefect.io\" > Discourse forum </ a > ! </ p > < p > Happy Engineering, </ p > < p > Prefect Customer Success Team </ p > </ td > </ tr > </ table > </ body > </ html > That's it \ud83e\udd73. Now emails sent through Prefect flows will look more elegant. I hope this helps you.","title":"Running"}]}